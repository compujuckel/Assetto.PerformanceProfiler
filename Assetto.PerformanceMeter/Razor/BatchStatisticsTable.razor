@using System.Text
<p>
    <table class="stats">
        <thead>
        <tr>
            <th class="title">Scene</th>
            <th>Avg</th>
            <th></th>
            <th>Min</th>
            <th></th>
            <th>Max</th>
            <th></th>
            <th>StdDev</th>
            <th></th>
            <th>P50</th>
            <th></th>
            <th>P75</th>
            <th></th>
            <th>P90</th>
            <th></th>
            <th>P99</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var scene in Results)
        {
            var row = Accessor(scene.Result);
            var baseline = Accessor(Baseline.Result);
            var format = $"N{Precision}";

            <tr>
                <td class="title">@GetTitle(scene)</td>
                <td>@row.Average.ToString(format)</td>
                @GetIncrease(baseline.Average, row.Average)
                <td>@row.Min.ToString(format)</td>
                @GetIncrease(baseline.Min, row.Min)
                <td>@row.Max.ToString(format)</td>
                @GetIncrease(baseline.Max, row.Max)
                <td>@row.StdDev.ToString("N2")</td>
                @GetIncrease(baseline.StdDev, row.StdDev)
                <td>@row.P50.ToString(format)</td>
                @GetIncrease(baseline.P50, row.P50)
                <td>@row.P75.ToString(format)</td>
                @GetIncrease(baseline.P75, row.P75)
                <td>@row.P90.ToString(format)</td>
                @GetIncrease(baseline.P90, row.P90)
                <td>@row.P99.ToString(format)</td>
                @GetIncrease(baseline.P99, row.P99)
            </tr>
        }
        </tbody>
    </table>
</p>

@code
{
    [Parameter] public required BatchSceneResult Baseline { get; init; }
    
    [Parameter] public required List<BatchSceneResult> Results { get; init; }

    [Parameter] public required Func<SceneResult, SampleStatistics> Accessor { get; init; }
    [Parameter] public required int Precision { get; init; } = 2;

    private static MarkupString GetIncrease(double baseline, double value)
    {
        var result = value / baseline - 1;
        if (double.IsNaN(result)) result = 0;
        
        var sign = result >= 0 ? "+" : "";
        var increaseClass = "";
        if (result > 0)
        {
            increaseClass = "increase";
        }
        else if (result < 0)
        {
            increaseClass = "decrease";
        }
        return new MarkupString($"<td class=\"change {increaseClass}\">{sign}{result:P1}</td>");
    }

    private static string GetTitle(BatchSceneResult result)
    {
        var sb = new StringBuilder();
        sb.Append(result.TrackName);
        if (!string.IsNullOrEmpty(result.TrackLayout))
        {
            sb.Append(" (");
            sb.Append(result.TrackLayout);
            sb.Append(")");
        }

        sb.Append(" - ");
        sb.Append(result.CarModel);
        
        if (!string.IsNullOrEmpty(result.CarSkin))
        {
            sb.Append(" (");
            sb.Append(result.CarSkin);
            sb.Append(")");
        }

        return sb.ToString();
    }
}