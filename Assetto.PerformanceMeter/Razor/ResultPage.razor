@using System.Globalization
@using System.Text.Json
@using Humanizer

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Assetto PerformanceMeter Results</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body {
            font-family: sans-serif;
            max-width: 768px;
            margin-left: auto;
            margin-right: auto;
        }

        table {
            width: 100%;
        }
        table.stats td:first-child, table.stats th:first-child {
            text-align: left;
        }
        table.stats td:not(:first-child), table.stats th:not(:first-child) {
            text-align: right;
            width: 70px;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.min.js"
            integrity="sha512-CQBWl4fJHWbryGE+Pc7UAxWMUMNMWzWxF4SQo9CgkJIN1kx6djDQZjh3Y8SZ1d+6I+1zze6Z7kHXO7q3UyZAWw=="
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>
<h1>Performance Results - @Results.Configuration.CarModel (@Results.Configuration.CarSkin) on @Results.Configuration.TrackName (@Results.Configuration.TrackLayout)</h1>

<h2>Metadata</h2>

<table>
    <tbody>
    <tr>
        <td>OS</td>
        <td>@Results.SystemInfo.OS.Name (@Results.SystemInfo.OS.Version)</td>
    </tr>
    @foreach (var cpu in Results.SystemInfo.CPU)
    {
        <tr>
            <td>CPU</td>
            <td>@cpu.Name (@cpu.Cores Cores / @cpu.Threads Threads)</td>
        </tr>
    }
    @foreach (var gpu in Results.SystemInfo.GPU)
    {
        <tr>
            <td>GPU</td>
            <td>@gpu.Name (@ByteSize.FromBytes(gpu.VRAM).Humanize("GB", CultureInfo.InvariantCulture), Driver @gpu.DriverVersion)</td>
        </tr>
    }
    <tr>
        <td>Memory</td>
        <td>@(ByteSize.FromBytes(Results.SystemInfo.Memory.Size).Humanize("GB", CultureInfo.InvariantCulture))</td>
    </tr>
    </tbody>
</table>

<h2>Results</h2>

<h3>CPU Time</h3>

<canvas id="cpuTimeChart" width="400" height="200"></canvas>

<StatisticsTable Results="Results" Accessor="s => s.CpuTimeStatistics"></StatisticsTable>

<h3>GPU Time</h3>

<canvas id="gpuTimeChart" width="400" height="200"></canvas>

<StatisticsTable Results="Results" Accessor="s => s.GpuTimeStatistics"></StatisticsTable>

<h3>Draw Calls</h3>

<StatisticsTable Results="Results" Accessor="s => s.DrawCallsStatistics"></StatisticsTable>

<h3>Triangles</h3>

<StatisticsTable Results="Results" Accessor="s => s.SceneTrianglesStatistics"></StatisticsTable>

<h3>VRAM Usage</h3>

<StatisticsTable Results="Results" Accessor="s => s.VramUsageStatistics"></StatisticsTable>

<script>
    const results = @(ResultsJsonRaw);

    function generateLabels(count) {
        const labels = [];
        for (let i = 1; i <= count; i++) {
            labels.push(i);
        }

        return labels;
    }

    function drawChart(id, title, data) {
        const ctx = document.getElementById(id).getContext("2d");

        let maxLength = 0;
        const datasets = [];
        for (const dataRow of data) {

            if (dataRow.data.length > maxLength) {
                maxLength = dataRow.data.length
            }

            datasets.push({
                label: dataRow.name,
                data: dataRow.data
            });
        }

        console.log(datasets);

        const chart = new Chart(ctx, {
            type: "line",
            data: {
                labels: generateLabels(maxLength),
                datasets: datasets
            },
            options: {
                responsive: true,
                elements: {
                    point: {
                        pointStyle: false
                    },
                    line: {
                        borderWidth: 1
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            display: false,
                        },
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });
    }

    function drawCharts(data) {
        drawChart("cpuTimeChart", "CPU Time (ms)", Object.entries(data.Scenes).map(([k, v]) => { return { name: k, data: v.Samples.CpuTimeMs } }));
        drawChart("gpuTimeChart", "GPU Time (ms)", Object.entries(data.Scenes).map(([k, v]) => { return { name: k, data: v.Samples.GpuTimeMs } }));
    }

    drawCharts(results);
</script>
</body>
</html>

@code
{
    [Parameter]
    public required Results Results { get; set; }

    private MarkupString ResultsJsonRaw => new(JsonSerializer.Serialize(Results));
}
